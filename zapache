#! /bin/bash
#
# Name: zapache
#
# Checks Apache activity.
#
# Author: Alejandro Michavila
# Modified for Scoreboard Values: Murat Koc, murat@profelis.com.tr
# Modified for using also as external script: Murat Koc, murat@profelis.com.tr
# Modified for outputting usage or ZBX_NOTSUPPORTED: Alejandro Michavila
# Modified to do cacheing for performance, dmitry.frolov@gmail.com
#
# Version: 1.5
#
 
zapachever="1.5"
rval=0
[ "$TMPDIR" ] || TMPDIR=/tmp
 
function usage()
{
	echo "zapache version: $zapachever"
	echo "usage:"
	echo "  $0 [<url>] TotalAccesses                 - Check total accesses."
	echo "  $0 [<url>] TotalKBytes                   - Check total KBytes."
	echo "  $0 [<url>] CPULoad                       - Check CPU load."
	echo "  $0 [<url>] Uptime                        - Check uptime."
	echo "  $0 [<url>] ReqPerSec                     - Check requests per second."
	echo "  $0 [<url>] BytesPerSec                   - Check Bytes per second."
	echo "  $0 [<url>] BytesPerReq                   - Check Bytes per request."
	echo "  $0 [<url>] BusyWorkers                   - Check busy workers."
	echo "  $0 [<url>] IdleWorkers                   - Check idle workers."
	echo "  $0 [<url>] version                       - Version of this script."
	echo "  $0 [<url>] ping                          - Check if Apache is up."
	echo "  $0 [<url>] WaitingForConnection          - Check Waiting for Connection processess."
	echo "  $0 [<url>] StartingUp                    - Check Starting Up processess."
	echo "  $0 [<url>] ReadingRequest                - Check Reading Request processess."
	echo "  $0 [<url>] SendingReply                  - Check Sending Reply processess."
	echo "  $0 [<url>] KeepAlive                     - Check KeepAlive Processess."
	echo "  $0 [<url>] DNSLookup                     - Check DNSLookup Processess."
	echo "  $0 [<url>] ClosingConnection             - Check Closing Connection Processess."
	echo "  $0 [<url>] Logging                       - Check Logging Processess."
	echo "  $0 [<url>] GracefullyFinishing           - Check Gracefully Finishing Processess."
	echo "  $0 [<url>] IdleCleanupOfWorker           - Check Idle Cleanup of Worker Processess."
	echo "  $0 [<url>] OpenSlotWithNoCurrentProcess  - Check Open Slots with No Current Process."
}

########
# Main #
########

if [[ $# ==  1 ]];then
	#Agent Mode
	APACHE_HOST="localhost"
	CASE_VALUE="$1"
elif [[ $# == 2 ]];then
	#External Script Mode
	APACHE_HOST="$1"
	CASE_VALUE="$2"
else
	#No Parameter
	usage
	exit 0
fi

cache="$TMPDIR/zapache-$APACHE_HOST.cache"
cache_timestamp_check="$TMPDIR/zapache-$APACHE_HOST.ts"
touch -d "@$((`date +%s` - 60))" "$cache_timestamp_check"
if [ "$cache" -ot "$cache_timestamp_check" ]; then
	env - wget --no-check-certificate --quiet -O - "http://$APACHE_HOST/server-status?auto" > "$cache"
fi

if ! [ -s "$cache" ]; then
	echo "ZBX_NOTSUPPORTED"
	exit 1
fi
 
case "$CASE_VALUE" in
'TotalAccesses')
	awk '/^Total Accesses:/ {print $3}' < "$cache"
	rval=$?;;
'TotalKBytes')
	awk '/^Total kBytes:/ {print $3}' < "$cache"
	rval=$?;;
'CPULoad')
	awk '/^CPULoad:/ {print $2}' < "$cache"
	rval=$?;;
'Uptime')
	awk '/^Uptime:/ {print $2}' < "$cache"
	rval=$?;;
'ReqPerSec')
	awk '/^ReqPerSec:/ {print $2}' < "$cache"
	rval=$?;;
'BytesPerSec')
	awk '/^BytesPerSec:/ {print $2}' < "$cache"
	rval=$?;;
'BytesPerReq')
	awk '/^BytesPerReq:/ {print $2}' < "$cache"
	rval=$?;;
'BusyWorkers')
	awk '/^BusyWorkers:/ {print $2}' < "$cache"
	rval=$?;;
'IdleWorkers')
	awk '/^IdleWorkers:/ {print $2}' < "$cache"
	rval=$?;;
'WaitingForConnection')
	awk '/^Scoreboard:/ {print $2}' < "$cache" | 'BEGIN { FS = "_" }; { print NF-1 }'
	rval=$?;;
'StartingUp')
	awk '/^Scoreboard:/ {print $2}' < "$cache" | 'BEGIN { FS = "S" }; { print NF-1 }'
	rval=$?;;
'ReadingRequest')
	awk '/^Scoreboard:/ {print $2}' < "$cache" | 'BEGIN { FS = "R" }; { print NF-1 }'
	rval=$?;;
'SendingReply')
	awk '/^Scoreboard:/ {print $2}' < "$cache" | 'BEGIN { FS = "W" }; { print NF-1 }'
	rval=$?;;
'KeepAlive')
	awk '/^Scoreboard:/ {print $2}' < "$cache" | 'BEGIN { FS = "K" }; { print NF-1 }'
	rval=$?;;
'DNSLookup')
	awk '/^Scoreboard:/ {print $2}' < "$cache" | 'BEGIN { FS = "D" }; { print NF-1 }'
	rval=$?;;
'ClosingConnection')
	awk '/^Scoreboard:/ {print $2}' < "$cache" | 'BEGIN { FS = "C" }; { print NF-1 }'
	rval=$?;;
'Logging')
	awk '/^Scoreboard:/ {print $2}' < "$cache" | 'BEGIN { FS = "L" }; { print NF-1 }'
	rval=$?;;
'GracefullyFinishing')
	awk '/^Scoreboard:/ {print $2}' < "$cache" | 'BEGIN { FS = "G" }; { print NF-1 }'
	rval=$?;;
'IdleCleanupOfWorker')
	awk '/^Scoreboard:/ {print $2}' < "$cache" | 'BEGIN { FS = "I" }; { print NF-1 }'
	rval=$?;;
'OpenSlotWithNoCurrentProcess')
	awk '/^Scoreboard:/ {print $2}' < "$cache" | 'BEGIN { FS = "." }; { print NF-1 }'
	rval=$?;;
'version')
	echo "$zapachever"
	exit $rval;;
'ping')
	if [ ! -s "$cache" -o "$cache" -ot "$cache_timestamp_check" ]; then
		echo "0"
	else
		echo "1"
	fi
	exit 0;;
*)
	usage
	exit $rval;;
esac
 
if [ "$rval" -ne 0 ]; then
	echo "ZBX_NOTSUPPORTED"
fi
 
exit $rval
 
#
# end zapache
